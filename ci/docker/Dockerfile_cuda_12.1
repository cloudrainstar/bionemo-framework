# Ubuntu 20.04 ???
#ARG BASE_IMAGE=nvcr.io/nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
ARG PYTHON_VERSION=3.10.12
ARG PYTORCH_VERSION=2.3.0
ARG MAX_JOBS=-1
ARG APEX_COMMIT=810ffae374a2b9cb4b5c5e28eaeca7d7998fca0c
#ARG TE_COMMIT=744624d004f4514ffbaa90ac83e214311c86c607
#ARG TE_COMMIT=7d576ed25266a17a7b651f2c12e8498f67e0baea
ARG TE_COMMIT=c27ee60ec746210bcea4ec33958dbbff06706506
ARG NEMO_RUN_TAG=34259bd3e752fef94045a9a019e4aaf62bd11ce2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#FROM ${BASE_IMAGE} AS python_base
FROM nvcr.io/nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04 as python_base
ARG MAX_JOBS
ENV MAX_JOBS=${MAX_JOBS}

#RUN --mount=type=cache,id=apt-cache,target=/var/cache/apt,sharing=locked \
#    --mount=type=cache,id=apt-lib,target=/var/lib/apt,sharing=locked \
#    <<EOF
#apt update -y
#apt upgrade -y
#apt-get install -qyy \
#    -o APT::Install-Recommends=false \
#    -o APT::Install-Suggests=false \
#    curl \
#    build-essential \
#    ca-certificates \
#    curl \
#    software-properties-common \
#    git \
#    ninja-build \
#    cmake \
#    openmpi-bin \
#    libopenmpi-dev \
#    checkinstall \
#    libreadline-gplv2-dev \
#    libncursesw5-dev \
#    libssl-dev \
#    libsqlite3-dev \
#    tk-dev \
#    libgdbm-dev \
#    libc6-dev \
#    libbz2-dev \
#    libffi-dev \
#    zlib1g-dev
#rm -rf /var/lib/apt/lists/*
#EOF

RUN apt update -y && apt upgrade -y && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    -o APT::Install-Recommends=false \
    -o APT::Install-Suggests=false \
    build-essential \
    ca-certificates \
    curl \
    software-properties-common \
    git \
    ninja-build \
    cmake \
    openmpi-bin \
    libopenmpi-dev \
    checkinstall \
    libreadline-dev \
    libncursesw5-dev \
    libssl-dev \
    libsqlite3-dev \
    tk-dev \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    libffi-dev \
    zlib1g-dev \
    automake \
    libtool \
    libnl-3-200 \
    libnl-3-dev \
    libnl-route-3-200 \
    libnl-route-3-dev \
    libibverbs-dev \
    librdmacm-dev \
    libhwloc-dev \
    lzma \
    liblzma-dev \
    libbz2-dev \
    vim \
    less \
    && rm -rf /var/lib/apt/lists/*

ARG PYTHON_VERSION
WORKDIR /build/python
RUN <<EOF
curl -O https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz
tar -zxf Python-${PYTHON_VERSION}.tgz
cd Python-${PYTHON_VERSION}
./configure --enable-optimizations --prefix=/usr
make install
ln -s /usr/bin/python3 /usr/bin/python

python -m ensurepip --upgrade
ln -s /usr/bin/pip3 /usr/bin/pip

pip install setuptools
EOF

#COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv
#
## - Silence uv complaining about not being able to use hard links,
## - tell uv to byte-compile packages for faster application startups,
## - prevent uv from accidentally downloading isolated Python builds,
## - pick a Python,
## - and finally declare `/venv` as the target for `uv sync`.
#ENV UV_LINK_MODE=copy \
#    UV_COMPILE_BYTECODE=1 \
#    UV_PYTHON=python3.10 \
#    UV_PYTHON_DOWNLOADS=never \
#    UV_PROJECT_ENVIRONMENT=/venv
#
#

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
FROM python_base AS pytorch_base
ARG PYTORCH_VERSION
ARG MAX_JOBS
ENV MAX_JOBS=${MAX_JOBS}
ENV CUDA_HOME="/usr/local/cuda-12.1"
ENV PATH="${CUDA_HOME}/bin:${PATH}"
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_REQUIRE_CUDA=cuda>=9.0
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
ENV CUDA_ARCH_LIST="75-real;80-real;86-real;89-real;90-real"
ENV TORCH_CUDA_ARCH_LIST="5.2 6.0 6.1 7.0 7.2 7.5 8.0 8.6 8.7 8.8 8.9 9.0 9.0a 9.0+PTX"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
#ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64
#ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:$PATH
#ENV LD_LIBRARY_PATH="/usr/local/lib/python3.10/dist-packages/torch/lib:/usr/local/lib/python3.10/dist-packages/torch_tensorrt/lib:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:${LD_LIBRARY_PATH}"

RUN <<EOF
cd /usr/local
rm cuda
rm cuda-12
ln -s ./cuda-12.1 cuda
EOF

WORKDIR /build/
# the --index-url **MUST MATCH** the base image CUDA version !!!
# maybe --no-build-isolation ??
RUN pip install --index-url https://download.pytorch.org/whl/cu121 torch==${PYTORCH_VERSION}


FROM pytorch_base AS dl_deps_base
# NOTE:
# look at: https://github.com/pytorch/pytorch/blob/main/Dockerfile
# look at: https://github.com/huggingface/text-generation-inference/blob/main/Dockerfile

WORKDIR /build/openmpi
RUN curl -O https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.5.tar.gz && \
    tar -zxf openmpi-4.1.5.tar.gz && \
    cd openmpi-4.1.5 && \
    ./configure && \
    make -k all install
ENV MPI_HOME=/usr/local/lib/openmpi

WORKDIR /build

ARG APEX_COMMIT
# See NeMo readme for the latest tested versions of these libraries
RUN git clone https://github.com/NVIDIA/apex.git && \
  cd apex && \
  git checkout ${APEX_COMMIT} && \
  pip install wheel -r requirements.txt && \
  pip install . -v --no-build-isolation --disable-pip-version-check --no-cache-dir \
  --config-settings "--build-option=--cpp_ext --cuda_ext --fast_layer_norm --distributed_adam --deprecated_fused_adam --group_norm"

#COPY ci/docker/0001-Fix-to-support-CUDA-12.1.patch /build/0001-Fix-to-support-CUDA-12.1.patch
ARG TE_COMMIT
# Transformer Engine pre-1.7.0. 1.7 standardizes the meaning of bits in the attention mask to match
RUN git clone https://github.com/NVIDIA/TransformerEngine.git && \
  cd TransformerEngine && \
  git checkout ${TE_COMMIT} && \
  git submodule init && git submodule update && \
#  GIT_COMITTER_NAME='patcher' EMAIL='invalid@invalid' git am < /build/0001-Fix-to-support-CUDA-12.1.patch && \
  NVTE_FRAMEWORK=pytorch NVTE_WITH_USERBUFFERS=1 MPI_HOME=/usr/local/lib/openmpi pip install .

# Check the nemo dependency for causal conv1d and make sure this checkout
# tag matches. If not, update the tag in the following line.
RUN CAUSAL_CONV1D_FORCE_BUILD=TRUE pip --disable-pip-version-check --no-cache-dir install \
  git+https://github.com/Dao-AILab/causal-conv1d.git@v1.2.0.post2

# Mamba dependancy installation
RUN pip --disable-pip-version-check --no-cache-dir install \
  git+https://github.com/state-spaces/mamba.git@v2.0.3

ARG NEMO_RUN_TAG
# note: hatchling needed to install nemo-run
RUN pip install hatchling nemo_run@git+https://github.com/NVIDIA/NeMo-Run.git@${NEMO_RUN_TAG}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
FROM dl_deps_base AS bionemo_base

WORKDIR /build/yq
RUN <<EOF
curl -LO https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64.tar.gz
tar -zxf yq_linux_amd64.tar.gz
chmod +x yq_linux_amd64
ln -s $(pwd)/yq_linux_amd64 /usr/local/bin/yq
EOF

WORKDIR /workspace/bionemo2
COPY ./3rdparty /workspace/bionemo2/3rdparty
RUN pip install ./3rdparty/Megatron-LM
RUN pip install ./3rdparty/NeMo

COPY ./requirements-test.txt ./requirements-cve.txt /workspace/bionemo2/
COPY ./ci/docker/clobber_dependencies_into_requirements_txt.sh /workspace/bionemo2/ci/docker/clobber_dependencies_into_requirements_txt.sh
COPY ./docs /workspace/bionemo2/docs
COPY ./scripts /workspace/bionemo2/scripts
COPY ./sub-packages /workspace/bionemo2/sub-packages

# NOTE: we don't need any pytorch-geometric stuff right now
#       including it messes up our pinned torch dependency
#       so we **DO NOT INCLUDE** the bionemo-geometric sub-package !!!
# TODO: add this back and fix the pinning issue ! (will need to relax version constraints in geometric deps, most likely...)
RUN rm -r sub-packages/bionemo-geometric

#RUN --mount=type=bind,source=./.git,target=./.git \
#  --mount=type=bind,source=./requirements-test.txt,target=/requirements-test.txt \
#  --mount=type=bind,source=./requirements-cve.txt,target=/requirements-cve.txt \
RUN /workspace/bionemo2/ci/docker/clobber_dependencies_into_requirements_txt.sh && \
    pip freeze | grep torch\=\= >> all_requirements.txt && \
    pip install -r all_requirements.txt -r requirements-test.txt && \
    pip install --no-deps -e ./sub-packages/bionemo-*
    #    pip install -r all_requirements.txt -r /requirements-cve.txt -r /requirements-test.txt
